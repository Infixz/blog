title: 《High Performance Django》阅读笔记（二）
slug: high-performance-django-note-2
tags: High Performance Django, Django

[](![]())



## 第三章：The Deployment


### 先决条件

#### 操作系统

作者推荐使用 Ubuntu。同时作者给出了选择其他操作系统时，需要考虑的事情：

* 能够很容易的就使用 Python 2.7+ 。有些操作系统要安装 2.7+ 版本的 Python 非常的麻烦，如果是这样的话你就要慎重考虑了。
* 有长久的安全更新支持。

#### 配置管理

* Chef, Puppet, Ansible, Salt 都是比较好的配置管理工具
* Fabric 不是配置管理工具，如果你把它当作配置管理工具的话，会有你头疼的时候。你可以在 Fabric 的基础上
  构建你自己的配置管理工具。


#### 进程管理

* 系统默认的工具：upstart, systemd
* 第三方软件：deamontools, supervisord, circus

#### 更新代码

更新代码一般需要进行下面几步：

1. 从版本控制服务器上拉取最新的代码
2. 更新依赖
3. 合并数据库更改(migrate)
4. 收集，压缩，推送静态文件到 CDN
5. reload WSGI 服务器
6. 重启后台 workers

推荐写个脚本自动执行这些操作，这样不容易出错。如果要更新多台服务器的话，可以使用远程执行
框架来做这种事情，比如： Salt, Fabric。

有一点特别要注意的是，一旦服务上线就应该尽可能的使用平滑 reload 的方式来代替重启进程的暴力方式。

#### 多个远程环境

至少要有两个环境吧：打包/开发环境，生产环境。
同时多个环境尽量保证一致性，尤其是多个生产环境之间（设置，软件，系统，等等）。
不过有些东西还行要区分的，比如：

* 第三方服务配置。比如，你肯定不希望在开发环境下触发支付操作或发送文件到生产环境下的 CDN 上。
* 获取数据的问题。经常看到某些人在开发环境下使用线上数据库的副本，但是这里有几个问题要考虑：
    * 你的开发环境更生产环境一样安全吗？监控松散的开发机器是黑帽黑客经常会攻击的目标。
* 有可能会从你的应用中发送邮件或通知吗？从你的开发环境下向你的用户发送数千封邮件不仅是非常
  尴尬的事情，同时也会影响你们的商业。

#### 避免单点故障

要经常备份，确保你知道所有存储的数据（数据库，用户上传的数据，等等）都有备份。这样出现故障的时候
其他其他机器的时候丢失的数据会少一点。

高可用是一个可以考虑的方法，如果对你的商业来说他是非常重要的话。 HA 可以保证在出现服务挂掉
的情况下能够无缝自动切换到备用服务或者说不用手动切换。不过需要注意的是通常构建高可用
的花费比服务当掉的花费还高。

在考虑架构的时候要考虑到如何解决单点故障的问题。举个例子，当使用第三方的 Amazon EC2 的时候，
你是否能够接受某些区域的设备宕机，整个地区呢？如果服务商 Amazone 当了怎么办？
越早考虑这些问题就能在灾难实际发生的时候更好的应对。


### 服务器布局

